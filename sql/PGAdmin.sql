-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


ALTER TABLE IF EXISTS public.feedback DROP CONSTRAINT IF EXISTS feedback_order_id_fkey;

ALTER TABLE IF EXISTS public.inventory DROP CONSTRAINT IF EXISTS inventory_staff_id_fkey;

ALTER TABLE IF EXISTS public."order" DROP CONSTRAINT IF EXISTS order_customer_id_fkey;

ALTER TABLE IF EXISTS public.order_delivery_sales DROP CONSTRAINT IF EXISTS order_delivery_sales_order_id_fkey;

ALTER TABLE IF EXISTS public.order_delivery_sales DROP CONSTRAINT IF EXISTS order_delivery_sales_staff_id_fkey;

ALTER TABLE IF EXISTS public.order_pick_up_sales DROP CONSTRAINT IF EXISTS order_pick_up_sales_order_id_fkey;

ALTER TABLE IF EXISTS public.order_pick_up_sales DROP CONSTRAINT IF EXISTS order_pick_up_sales_staff_id_fkey;

ALTER TABLE IF EXISTS public.order_product DROP CONSTRAINT IF EXISTS order_product_order_id_fkey;

ALTER TABLE IF EXISTS public.order_product DROP CONSTRAINT IF EXISTS order_product_stock_id_fkey;

ALTER TABLE IF EXISTS public.product DROP CONSTRAINT IF EXISTS product_station_id_fkey;

ALTER TABLE IF EXISTS public.product_inventory DROP CONSTRAINT IF EXISTS product_inventory_product_id_fkey;

ALTER TABLE IF EXISTS public.product_inventory DROP CONSTRAINT IF EXISTS product_inventory_staff_id_fkey;

ALTER TABLE IF EXISTS public.staff DROP CONSTRAINT IF EXISTS staff_station_id_fkey;

ALTER TABLE IF EXISTS public.walk_in_product DROP CONSTRAINT IF EXISTS walk_in_product_product_id_fkey;

ALTER TABLE IF EXISTS public.walk_in_product DROP CONSTRAINT IF EXISTS walk_in_product_walk_in_id_fkey;

ALTER TABLE IF EXISTS public.walk_in_sales DROP CONSTRAINT IF EXISTS walk_in_sales_staff_id_fkey;



DROP TABLE IF EXISTS public."Customer";

CREATE TABLE IF NOT EXISTS public."Customer"
(
    customer_id serial NOT NULL,
    customer_fname character varying(30) COLLATE pg_catalog."default" NOT NULL,
    customer_lname character varying(30) COLLATE pg_catalog."default" NOT NULL,
    customer_phone_num bigint NOT NULL,
    customer_address character varying(100) COLLATE pg_catalog."default" NOT NULL,
    customer_gender gender NOT NULL,
    customer_username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    customer_password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    customer_address_long character varying(255) COLLATE pg_catalog."default" NOT NULL,
    customer_address_lat character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Customer_pkey" PRIMARY KEY (customer_id),
    CONSTRAINT "Customer_customer_username_key" UNIQUE (customer_username)
);

COMMENT ON TABLE public."Customer"
    IS 'This table contains the personal information of the customer.';

COMMENT ON COLUMN public."Customer".customer_id
    IS 'Customer’s ID and primary key of the table.';

COMMENT ON COLUMN public."Customer".customer_fname
    IS 'Customer’s first name.';

COMMENT ON COLUMN public."Customer".customer_lname
    IS 'Customer’s last name.';

COMMENT ON COLUMN public."Customer".customer_phone_num
    IS 'Customer’s active phone number.';

COMMENT ON COLUMN public."Customer".customer_address
    IS 'Customer’s delivery address.';

COMMENT ON COLUMN public."Customer".customer_gender
    IS 'Customer’s gender.';

COMMENT ON COLUMN public."Customer".customer_username
    IS 'Customer’s username.';

COMMENT ON COLUMN public."Customer".customer_password
    IS 'Customer’s hashed password.';

COMMENT ON COLUMN public."Customer".customer_address_long
    IS 'Longitude of the customer’s address for precise location.';

COMMENT ON COLUMN public."Customer".customer_address_lat
    IS 'Latitude of the customer’s address for precise location.';

DROP TABLE IF EXISTS public.app_owner;

CREATE TABLE IF NOT EXISTS public.app_owner
(
    app_owner_id serial NOT NULL,
    app_owner_fname character varying(30) COLLATE pg_catalog."default",
    app_owner_lname character varying(30) COLLATE pg_catalog."default",
    app_owner_phone_num bigint,
    app_owner_address character varying(255) COLLATE pg_catalog."default",
    app_owner_gender gender,
    app_owner_username character varying(50) COLLATE pg_catalog."default",
    app_owner_password character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT app_owner_pkey PRIMARY KEY (app_owner_id)
);

COMMENT ON TABLE public.app_owner
    IS 'This table contains the personal information of the App Owner.';

COMMENT ON COLUMN public.app_owner.app_owner_id
    IS 'Primary key of the App Owner table.';

COMMENT ON COLUMN public.app_owner.app_owner_fname
    IS 'First name of the App Owner.';

COMMENT ON COLUMN public.app_owner.app_owner_lname
    IS 'Last name of the App Owner.';

COMMENT ON COLUMN public.app_owner.app_owner_phone_num
    IS 'Phone number of the App Owner.';

COMMENT ON COLUMN public.app_owner.app_owner_address
    IS 'Address of the App Owner.';

COMMENT ON COLUMN public.app_owner.app_owner_gender
    IS 'Gender of the App Owner.';

COMMENT ON COLUMN public.app_owner.app_owner_username
    IS 'Username of the App Owner.';

COMMENT ON COLUMN public.app_owner.app_owner_password
    IS 'Password of the App Owner.';

DROP TABLE IF EXISTS public.feedback;

CREATE TABLE IF NOT EXISTS public.feedback
(
    feedback_id serial NOT NULL,
    feedback_rating integer,
    feedback_description character varying(255) COLLATE pg_catalog."default",
    order_id integer,
    CONSTRAINT feedback_pkey PRIMARY KEY (feedback_id)
);

COMMENT ON TABLE public.feedback
    IS 'This table contains the feedback details of the delivery and service created by the customer.';

COMMENT ON COLUMN public.feedback.feedback_id
    IS 'Feedback ID and primary key of the table.';

COMMENT ON COLUMN public.feedback.feedback_rating
    IS 'Star rating of the service (1 to 5).';

COMMENT ON COLUMN public.feedback.feedback_description
    IS 'Comments provided by the customer.';

COMMENT ON COLUMN public.feedback.order_id
    IS 'Foreign key to the related order ID.';

DROP TABLE IF EXISTS public.inventory;

CREATE TABLE IF NOT EXISTS public.inventory
(
    inv_id serial NOT NULL,
    staff_id integer,
    CONSTRAINT inventory_pkey PRIMARY KEY (inv_id)
);

COMMENT ON TABLE public.inventory
    IS 'This table contains stock details logged by the delivery staff and onsite workers.';

COMMENT ON COLUMN public.inventory.inv_id
    IS 'Primary key for the inventory log.';

COMMENT ON COLUMN public.inventory.staff_id
    IS 'Foreign key referencing the staff who logged the inventory.';

DROP TABLE IF EXISTS public."order";

CREATE TABLE IF NOT EXISTS public."order"
(
    order_id serial NOT NULL,
    order_status order_status_enum,
    order_service_type order_service_enum,
    order_type order_enum,
    order_schedule timestamp without time zone,
    order_location character varying(255) COLLATE pg_catalog."default",
    customer_id integer,
    order_longitude character varying(255) COLLATE pg_catalog."default",
    order_latitude character varying(255) COLLATE pg_catalog."default",
    order_created timestamp without time zone,
    CONSTRAINT order_pkey PRIMARY KEY (order_id)
);

COMMENT ON TABLE public."order"
    IS 'This table contains the order details scheduled by the customer.';

COMMENT ON COLUMN public."order".order_id
    IS 'Order ID and primary key of the table.';

COMMENT ON COLUMN public."order".order_status
    IS 'Current status of the order (e.g., Accepted, Completed).';

COMMENT ON COLUMN public."order".order_service_type
    IS 'Service type for the order (e.g., On the Day or Pre-Order).';

COMMENT ON COLUMN public."order".order_type
    IS 'Type of order: Delivery or Pick-Up.';

COMMENT ON COLUMN public."order".order_schedule
    IS 'The scheduled date and time for delivery.';

COMMENT ON COLUMN public."order".order_location
    IS 'Delivery location for the order.';

COMMENT ON COLUMN public."order".customer_id
    IS 'Foreign key referencing the customer who placed the order.';

COMMENT ON COLUMN public."order".order_longitude
    IS 'Longitude of the delivery location.';

COMMENT ON COLUMN public."order".order_latitude
    IS 'Latitude of the delivery location.';

COMMENT ON COLUMN public."order".order_created
    IS 'Date and time the order was created.';

DROP TABLE IF EXISTS public.order_delivery_sales;

CREATE TABLE IF NOT EXISTS public.order_delivery_sales
(
    ods_id serial NOT NULL,
    ods_payment_method payment_method_enum NOT NULL,
    ods_payment_confirm_photo character varying(255) COLLATE pg_catalog."default",
    ods_delivery_confirm_photo character varying(255) COLLATE pg_catalog."default",
    ods_time_complete timestamp without time zone,
    order_id integer,
    staff_id integer,
    CONSTRAINT order_delivery_sales_pkey PRIMARY KEY (ods_id)
);

COMMENT ON TABLE public.order_delivery_sales
    IS 'This table contains orders used by delivery personnel to generate routes and confirm deliveries.';

COMMENT ON COLUMN public.order_delivery_sales.ods_id
    IS 'Primary key for the order delivery sales.';

COMMENT ON COLUMN public.order_delivery_sales.ods_payment_method
    IS 'Payment method used for the order (e.g., Cash, GCash, Maya).';

COMMENT ON COLUMN public.order_delivery_sales.ods_payment_confirm_photo
    IS 'Photo evidence of payment.';

COMMENT ON COLUMN public.order_delivery_sales.ods_delivery_confirm_photo
    IS 'Photo evidence of delivery completion.';

COMMENT ON COLUMN public.order_delivery_sales.ods_time_complete
    IS 'Timestamp when the delivery was completed.';

COMMENT ON COLUMN public.order_delivery_sales.order_id
    IS 'Foreign key referencing the related order ID.';

COMMENT ON COLUMN public.order_delivery_sales.staff_id
    IS 'Foreign key referencing the staff who handled the delivery.';

DROP TABLE IF EXISTS public.order_pick_up_sales;

CREATE TABLE IF NOT EXISTS public.order_pick_up_sales
(
    ops_id serial NOT NULL,
    ops_payment_method payment_method_enum NOT NULL,
    ops_payment_confirm_photo character varying(255) COLLATE pg_catalog."default",
    ops_time_complete timestamp without time zone,
    order_id integer,
    staff_id integer,
    CONSTRAINT order_pick_up_sales_pkey PRIMARY KEY (ops_id)
);

COMMENT ON TABLE public.order_pick_up_sales
    IS 'This table contains orders used by onsite workers to confirm pick-up orders.';

COMMENT ON COLUMN public.order_pick_up_sales.ops_id
    IS 'Primary key for the order pick-up sales.';

COMMENT ON COLUMN public.order_pick_up_sales.ops_payment_method
    IS 'Payment method used for the order (e.g., Cash, GCash, Maya).';

COMMENT ON COLUMN public.order_pick_up_sales.ops_payment_confirm_photo
    IS 'Photo evidence of payment.';

COMMENT ON COLUMN public.order_pick_up_sales.ops_time_complete
    IS 'Timestamp when the pick-up order was completed.';

COMMENT ON COLUMN public.order_pick_up_sales.order_id
    IS 'Foreign key referencing the related order ID.';

COMMENT ON COLUMN public.order_pick_up_sales.staff_id
    IS 'Foreign key referencing the staff who handled the pick-up.';

DROP TABLE IF EXISTS public.order_product;

CREATE TABLE IF NOT EXISTS public.order_product
(
    order_product_id serial NOT NULL,
    order_product_quantity integer,
    order_product_price numeric(10, 2),
    order_id integer,
    stock_id integer,
    CONSTRAINT order_product_pkey PRIMARY KEY (order_product_id)
);

COMMENT ON TABLE public.order_product
    IS 'This table contains the products associated with orders scheduled by customers.';

COMMENT ON COLUMN public.order_product.order_product_id
    IS 'Primary key for the ordered product.';

COMMENT ON COLUMN public.order_product.order_product_quantity
    IS 'Number of gallons ordered through the app.';

COMMENT ON COLUMN public.order_product.order_product_price
    IS 'Total price of the products ordered (stored as NUMERIC for precision).';

COMMENT ON COLUMN public.order_product.order_id
    IS 'Foreign key referencing the related order ID.';

COMMENT ON COLUMN public.order_product.stock_id
    IS 'Foreign key referencing the related stock ID.';

DROP TABLE IF EXISTS public.product;

CREATE TABLE IF NOT EXISTS public.product
(
    product_id serial NOT NULL,
    product_water_type character varying(30) COLLATE pg_catalog."default" NOT NULL,
    product_price numeric(10, 2),
    product_size character varying(20) COLLATE pg_catalog."default" NOT NULL,
    station_id integer,
    CONSTRAINT product_pkey PRIMARY KEY (product_id)
);

COMMENT ON TABLE public.product
    IS 'This table contains product information sold by the water refilling station.';

COMMENT ON COLUMN public.product.product_id
    IS 'Primary key for the product.';

COMMENT ON COLUMN public.product.product_water_type
    IS 'Type of water (e.g., purified, alkaline).';

COMMENT ON COLUMN public.product.product_price
    IS 'Price of the product.';

COMMENT ON COLUMN public.product.product_size
    IS 'Size of the container (e.g., 5 gallons).';

COMMENT ON COLUMN public.product.station_id
    IS 'Foreign key referencing the related station ID.';

DROP TABLE IF EXISTS public.product_inventory;

CREATE TABLE IF NOT EXISTS public.product_inventory
(
    prod_inv_id serial NOT NULL,
    prod_inv_type inventory_type_enum NOT NULL,
    prod_inv_quantity integer,
    prod_inv_time_date timestamp without time zone,
    staff_id integer,
    product_id integer,
    CONSTRAINT product_inventory_pkey PRIMARY KEY (prod_inv_id)
);

COMMENT ON TABLE public.product_inventory
    IS 'This table contains product details associated with the inventory logs.';

COMMENT ON COLUMN public.product_inventory.prod_inv_id
    IS 'Primary key for the product inventory log.';

COMMENT ON COLUMN public.product_inventory.prod_inv_type
    IS 'Type of logging in the inventory (e.g., Refilled, Deployed).';

COMMENT ON COLUMN public.product_inventory.prod_inv_quantity
    IS 'Number of containers logged.';

COMMENT ON COLUMN public.product_inventory.prod_inv_time_date
    IS 'Timestamp when the inventory was logged.';

COMMENT ON COLUMN public.product_inventory.staff_id
    IS 'Foreign key referencing the staff who logged the inventory.';

COMMENT ON COLUMN public.product_inventory.product_id
    IS 'Foreign key referencing the product in the inventory.';

DROP TABLE IF EXISTS public.staff;

CREATE TABLE IF NOT EXISTS public.staff
(
    staff_id serial NOT NULL,
    staff_fname character varying(30) COLLATE pg_catalog."default" NOT NULL,
    staff_lname character varying(30) COLLATE pg_catalog."default" NOT NULL,
    staff_type staff_type_enum NOT NULL,
    staff_phone_num character(11) COLLATE pg_catalog."default" NOT NULL,
    staff_gender gender NOT NULL,
    staff_username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    staff_password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    station_id integer,
    CONSTRAINT staff_pkey PRIMARY KEY (staff_id),
    CONSTRAINT staff_staff_phone_num_key UNIQUE (staff_phone_num),
    CONSTRAINT staff_staff_username_key UNIQUE (staff_username)
);

COMMENT ON TABLE public.staff
    IS 'This table contains the personal information of the staff (delivery and onsite workers).';

COMMENT ON COLUMN public.staff.staff_id
    IS 'Primary key for the staff.';

COMMENT ON COLUMN public.staff.staff_fname
    IS 'First name of the staff member.';

COMMENT ON COLUMN public.staff.staff_lname
    IS 'Last name of the staff member.';

COMMENT ON COLUMN public.staff.staff_type
    IS 'Type of staff (Delivery, Onsite).';

COMMENT ON COLUMN public.staff.staff_phone_num
    IS 'Phone number of the staff member.';

COMMENT ON COLUMN public.staff.staff_gender
    IS 'Gender of the staff member.';

COMMENT ON COLUMN public.staff.staff_username
    IS 'Username of the staff member.';

COMMENT ON COLUMN public.staff.staff_password
    IS 'Password of the staff member.';

COMMENT ON COLUMN public.staff.station_id
    IS 'Foreign key referencing the related water refilling station.';

DROP TABLE IF EXISTS public.station_owner;

CREATE TABLE IF NOT EXISTS public.station_owner
(
    st_owner_id serial NOT NULL,
    st_owner_fname character varying(30) COLLATE pg_catalog."default" NOT NULL,
    st_owner_lname character varying(30) COLLATE pg_catalog."default" NOT NULL,
    st_owner_phone_num character(11) COLLATE pg_catalog."default" NOT NULL,
    st_owner_gender gender NOT NULL,
    st_owner_username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    st_owner_password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT station_owner_pkey PRIMARY KEY (st_owner_id),
    CONSTRAINT station_owner_st_owner_phone_num_key UNIQUE (st_owner_phone_num),
    CONSTRAINT station_owner_st_owner_username_key UNIQUE (st_owner_username)
);

COMMENT ON TABLE public.station_owner
    IS 'This table contains personal information of the station owner.';

COMMENT ON COLUMN public.station_owner.st_owner_id
    IS 'Primary key for the station owner.';

COMMENT ON COLUMN public.station_owner.st_owner_fname
    IS 'First name of the station owner.';

COMMENT ON COLUMN public.station_owner.st_owner_lname
    IS 'Last name of the station owner.';

COMMENT ON COLUMN public.station_owner.st_owner_phone_num
    IS 'Phone number of the station owner.';

COMMENT ON COLUMN public.station_owner.st_owner_gender
    IS 'Gender of the station owner.';

COMMENT ON COLUMN public.station_owner.st_owner_username
    IS 'Unique username for the station owner.';

COMMENT ON COLUMN public.station_owner.st_owner_password
    IS 'Password for the station owner account.';

DROP TABLE IF EXISTS public.walk_in_product;

CREATE TABLE IF NOT EXISTS public.walk_in_product
(
    walk_in_product_id serial NOT NULL,
    walk_in_quantity integer NOT NULL,
    walk_in_price numeric(3, 2),
    walk_in_id integer,
    product_id integer,
    CONSTRAINT walk_in_product_pkey PRIMARY KEY (walk_in_product_id)
);

COMMENT ON TABLE public.walk_in_product
    IS 'This table contains information about products sold through onsite and offsite transactions by walk-in customers.';

COMMENT ON COLUMN public.walk_in_product.walk_in_product_id
    IS 'Primary key of the Walk-In Product table.';

COMMENT ON COLUMN public.walk_in_product.walk_in_quantity
    IS 'The number of containers sold through onsite and offsite transactions.';

COMMENT ON COLUMN public.walk_in_product.walk_in_price
    IS 'Total price of the products sold for this record.';

COMMENT ON COLUMN public.walk_in_product.walk_in_id
    IS 'Foreign key referencing the Walk-In Sales table.';

COMMENT ON COLUMN public.walk_in_product.product_id
    IS 'Foreign key referencing the Product table.';

DROP TABLE IF EXISTS public.walk_in_sales;

CREATE TABLE IF NOT EXISTS public.walk_in_sales
(
    walk_in_id serial NOT NULL,
    walk_in_trans_type transaction_type_enum NOT NULL,
    walk_in_payment_method payment_method_enum NOT NULL,
    walk_in_payment_confirm_photo character varying(255) COLLATE pg_catalog."default",
    walk_in_payment numeric(10, 2),
    staff_id integer,
    CONSTRAINT walk_in_sales_pkey PRIMARY KEY (walk_in_id)
);

COMMENT ON TABLE public.walk_in_sales
    IS 'This table contains sales information from onsite and offsite walk-in transactions.';

COMMENT ON COLUMN public.walk_in_sales.walk_in_id
    IS 'Primary key for walk-in sales.';

COMMENT ON COLUMN public.walk_in_sales.walk_in_trans_type
    IS 'Type of transaction (Onsite or Offsite).';

COMMENT ON COLUMN public.walk_in_sales.walk_in_payment_method
    IS 'Payment method used for the transaction.';

COMMENT ON COLUMN public.walk_in_sales.walk_in_payment_confirm_photo
    IS 'Photo evidence of payment.';

COMMENT ON COLUMN public.walk_in_sales.walk_in_payment
    IS 'Amount paid during the transaction (NUMERIC for precise financial calculations).';

COMMENT ON COLUMN public.walk_in_sales.staff_id
    IS 'Foreign key referencing the staff who handled the transaction.';

DROP TABLE IF EXISTS public.water_refilling_station;

CREATE TABLE IF NOT EXISTS public.water_refilling_station
(
    station_id serial NOT NULL,
    station_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    station_address character varying(255) COLLATE pg_catalog."default" NOT NULL,
    station_phone_num character(11) COLLATE pg_catalog."default" NOT NULL,
    station_longitude character varying(255) COLLATE pg_catalog."default",
    station_latitude character varying(255) COLLATE pg_catalog."default",
    station_paymaya_acc character varying(255) COLLATE pg_catalog."default",
    station_gcash_qr character varying(255) COLLATE pg_catalog."default",
    station_paymaya_qr character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT water_refilling_station_pkey PRIMARY KEY (station_id),
    CONSTRAINT water_refilling_station_station_phone_num_key UNIQUE (station_phone_num)
);

COMMENT ON TABLE public.water_refilling_station
    IS 'This table contains the details of the water refilling stations.';

COMMENT ON COLUMN public.water_refilling_station.station_id
    IS 'Primary key for the station.';

COMMENT ON COLUMN public.water_refilling_station.station_name
    IS 'Name of the water refilling station.';

COMMENT ON COLUMN public.water_refilling_station.station_address
    IS 'Address of the water refilling station.';

COMMENT ON COLUMN public.water_refilling_station.station_phone_num
    IS 'Contact phone number of the station.';

COMMENT ON COLUMN public.water_refilling_station.station_longitude
    IS 'Longitude for precise station location.';

COMMENT ON COLUMN public.water_refilling_station.station_latitude
    IS 'Latitude for precise station location.';

COMMENT ON COLUMN public.water_refilling_station.station_paymaya_acc
    IS 'PayMaya account of the station.';

COMMENT ON COLUMN public.water_refilling_station.station_gcash_qr
    IS 'GCash QR code for transactions.';

COMMENT ON COLUMN public.water_refilling_station.station_paymaya_qr
    IS 'PayMaya QR code for transactions.';

ALTER TABLE IF EXISTS public.feedback
    ADD CONSTRAINT feedback_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public."order" (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory
    ADD CONSTRAINT inventory_staff_id_fkey FOREIGN KEY (staff_id)
    REFERENCES public.staff (staff_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."order"
    ADD CONSTRAINT order_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES public."Customer" (customer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_delivery_sales
    ADD CONSTRAINT order_delivery_sales_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public."order" (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_delivery_sales
    ADD CONSTRAINT order_delivery_sales_staff_id_fkey FOREIGN KEY (staff_id)
    REFERENCES public.staff (staff_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_pick_up_sales
    ADD CONSTRAINT order_pick_up_sales_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public."order" (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_pick_up_sales
    ADD CONSTRAINT order_pick_up_sales_staff_id_fkey FOREIGN KEY (staff_id)
    REFERENCES public.staff (staff_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_product
    ADD CONSTRAINT order_product_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES public."order" (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.order_product
    ADD CONSTRAINT order_product_stock_id_fkey FOREIGN KEY (stock_id)
    REFERENCES public.inventory (inv_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.product
    ADD CONSTRAINT product_station_id_fkey FOREIGN KEY (station_id)
    REFERENCES public.water_refilling_station (station_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.product_inventory
    ADD CONSTRAINT product_inventory_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.product (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.product_inventory
    ADD CONSTRAINT product_inventory_staff_id_fkey FOREIGN KEY (staff_id)
    REFERENCES public.staff (staff_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.staff
    ADD CONSTRAINT staff_station_id_fkey FOREIGN KEY (station_id)
    REFERENCES public.water_refilling_station (station_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.walk_in_product
    ADD CONSTRAINT walk_in_product_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES public.product (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.walk_in_product
    ADD CONSTRAINT walk_in_product_walk_in_id_fkey FOREIGN KEY (walk_in_id)
    REFERENCES public.walk_in_sales (walk_in_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.walk_in_sales
    ADD CONSTRAINT walk_in_sales_staff_id_fkey FOREIGN KEY (staff_id)
    REFERENCES public.staff (staff_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
 
END;
